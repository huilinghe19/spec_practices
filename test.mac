

#%TITLE% TEST.MAC
#%NAME% TEST.MAC - TANGO attribute macro motors.
#                     ============================
#                       Smaract Controller Motors
#                     ============================
#
#%DESCRIPTION%
#     The macro set offers the possibility to set-up a TANGO attribute
#     as macro motor
#     Only read/write TANGO attributes can be used as macro motor.
#     The macro motor controller defined is called "test"
#
#%SETUP%
#Motor and Counter Device Configuration (Not CAMAC)
# MOTORS        DEVICE   ADDR  <>MODE  NUM                                 <>TYPE
# YES            test    -                10                           Macro Motors
#
# take care to set the NUM field to the good number of macro_motors you need.
#
#%EXAMPLE%
#%DL%
#
#
#%XDL%
#
#%END%

# for color printing :)
# need spec_utils

# Macro-MOTORS parameters.
global TEST
TEST_ERROR = "TEST: error on reading attribute macro motor"


######################################################################
##############################           #############################
##############################  General  #############################
##############################           #############################
######################################################################


#%UU%
#%MDESC%
#    Removes everything about attributes.mac
def test_unsetup '{
    test_unsetup_all
}'


#%IU%
#%MDESC%
#    Cosmetics.
def test_error_head '{
    tty_cntl("md")
    printf("ERROR: ")
    tty_cntl("me")
}'


######################################################################
###########################                ###########################
###########################  Macro motors  ###########################
###########################                ###########################                                                                                                         



def test_setup '{
    global TEST_DEVICE OSCIL_MOTOR_NAME OSCIL_MOTOR_NUM
    global TEST_DEBUG
    if ($# != 2) {
        TEST_DEVICE = getval("smaract control tango device name:", TEST_DEVICE)
        OSCIL_MOTOR_NAME = getval("Oscillation motor name:", OSCIL_MOTOR_NAME) 
  } else {
        TEST_DEVICE = "$1"
        OSCIL_MOTOR_NAME = "$2"
  }

  OSCIL_MOTOR_NUM = motor_num(OSCIL_MOTOR_NAME)
  if (OSCIL_MOTOR_NUM  == -1) {
    tty_cntl("md")
    eprintf("Invalif oscillation motor %s, check the spec config!\n", OSCIL_MOTOR_NAME)
    tty_cntl("me")
    return
  }

  cdef("prompt_mac", "test_prompt\n","_test_")
}'

#    Removes reading of all attributes.
def test_unsetup_all '{
    cdef("", "", "_test_", "delete")
}'

def test_prompt '{
   cdef("", "", "test_cleanup", "delete")
}'

def test_cmd(motnum, what, p1, p2) '{
    local _mot_mne  _dev  _attr
    local _pos_limit_sw  _neg_limit_sw _soft_pos_limit _soft_neg_limit

    _mot_mne = motor_mne(motnum)
    _dev    = TEST[_mot_mne]["dev_name"]
    _attr   = TEST[_mot_mne]["attr_name"]
    _target = _dev "/" _attr
  

    if(motnum == ".."){
        # key applying to all motors
        # print "--"
    }

    #-------------------------------------
    # "position" must return dial position (in integer steps)
    # parameters: none
    if (what == "position") {
        local _pos
          
        if (motor_par(motnum, "type") == -1){
            cprint_red(sprintf("test_cmd / position : motor %d is not defined", motnum))
        }
        else{
            _pos = tango_get(_dev, _attr)
            print(_pos)
            if (TANGO_ERR) {
               tty_cntl("md")
               print "\n" TEST_ERROR " " _mot_mne  " " _dev  "/"  _attr
               printf ("TANGO_ERR_MSG = \"%s\" \n\n", TANGO_ERR)
               print TANGO_ERR_STACK
               tty_cntl("me")
               exit
            }  
        }
        return (_pos)
    }

    #-------------------------------------
    # "get_status" called during the motion, must return a bit mask


    # bits meaning: 0 if motor idle
    #               2 if motor moving
    #               4 if negative limit on
    #               8 if positive limit on
    #              16 if motor halted with emergency stop
    #              32 if motor is faulty (spec >= 5.07.04-4
    # parameters:   none
    if (what == "get_status") {
        local _state
        local _ret
        local _tmp

        _ret = 0
        # read arbitrary attribute because otherwise State attribute is not updated
        #_tmp = tango_get(_dev, "Status")
        _state = tango_io(_dev, "State")
        if (TANGO_ERR){
            tty_cntl("md")
            print "\n" TEST_ERROR " " _mot_mne  " " _dev  "/"  _attr
            printf ("TANGO_ERR_MSG = \"%s\" \n\n", TANGO_ERR)
            print TANGO_ERR_STACK
            tty_cntl("me")
            exit
        }

        if (_state == 6) {
           #
           # DEVMOVING
           #
            _ret |= 2
            # return _ret
        }
        else if (_state == 8) {
           #
           # DEVFAULT
                                                                           
           #
            _ret |= 32
            # return _ret
        }
        else {
            _ret = 0
        }
        # now check whether negative limit is set
        _neg_limit_sw = tango_get(_dev, "CcwLimit")
        if (TANGO_ERR){
            tty_cntl("md")
            print "\n" TEST_ERROR " " _mot_mne  " " _dev  "/"  _attr
            printf ("TANGO_ERR_MSG = \"%s\" \n\n", TANGO_ERR)
            print TANGO_ERR_STACK
            tty_cntl("me")
            exit
        }
        if (_neg_limit_sw > 0) {
            _ret |= 4
        }
        # finally positive limit
        _pos_limit_sw = tango_get(_dev, "CwLimit")
        if (TANGO_ERR){
            tty_cntl("md")
            print "\n" TEST_ERROR " " _mot_mne  " " _dev  "/"  _attr
            printf ("TANGO_ERR_MSG = \"%s\" \n\n", TANGO_ERR)
            print TANGO_ERR_STACK
            tty_cntl("me")
            exit
        }
        if (_pos_limit_sw > 0) {
            _ret |= 8
        }
        return _ret
    }

    #-------------------------------------
    # "start_one"
    # parameters: p2 is relative motion, p1 is absolute requested position
    if (what == "start_one") {
        tango_put(_dev, _attr, p1)
        #tango_io(_dev, "Move")
        if (TANGO_ERR){
            tty_cntl("md")
            print "\n" " " _mot_mne  " " _dev  "/"  _attr
            printf ("TANGO_ERR_MSG = \"%s\" \n\n", TANGO_ERR)
            print TANGO_ERR_STACK
            tty_cntl("me")
            exit
        }
        return
    }

    #-------------------------------------

    # "set_position" called on "set_dial motor newpos"
    # parameters: p1 is the new position (in steps)
    #
    if (what == "set_position") {
        tango_put(_dev, _attr, p1)
        return 
	}
    if (what == "abort_one") {
        tango_io(_dev, "Stop")
        if (TANGO_ERR){
            tty_cntl("md")
            print "\n" TEST_ERROR " " _mot_mne  " " _dev  "/"  _attr
            printf ("TANGO_ERR_MSG = \"%s\" \n\n", TANGO_ERR)
            print TANGO_ERR_STACK
            tty_cntl("me")
            exit
        }
        return
    }
}'

