#%TITLE% SMARACT.MAC
#%NAME% SMARACT.MAC - TANGO attribute macro motors.
#                     ============================
#                       Smaract Controller Motors
#                     ============================
#
#%DESCRIPTION%
#     The macro set offers the possibility to set-up a TANGO attribute
#     as macro motor
#     Only read/write TANGO attributes can be used as macro motor.
#     The macro motor controller defined is called "test"
#
#%SETUP%
#Motor and Counter Device Configuration (Not CAMAC)
# MOTORS        DEVICE   ADDR  <>MODE  NUM                                 <>TYPE
# YES           SMARACT    -                10                           Macro Motors
#
# take care to set the NUM field to the good number of macro_motors you need.
#
#%EXAMPLE%
#%DL%
#
#
#%XDL%
#
#%END%

# for color printing :)
# need spec_utils
#include <stdio.h>
#include <stdlib.h>
# Macro-MOTORS parameters.
global SMARACT
SMARACT_ERROR = "SMARACT: error on reading attribute macro motor"


######################################################################
##############################           #############################
##############################  General  #############################
##############################           #############################
######################################################################


#%UU%
#%MDESC%
#    Removes everything about attributes.mac
def smaract_unsetup '{
    smaract_unsetup_all
}'


#%IU%
#%MDESC%
#    Cosmetics.
def smaract_error_head '{
    tty_cntl("md")
    printf("ERROR: ")
    tty_cntl("me")
}'


######################################################################
###########################                ###########################
###########################  Macro motors  ###########################
###########################                ###########################                                                                                                         



def smaract_setup '{
    local _fields  _dev_name   _nbarg
    local _args_strings  _mne

    _mne   = "$1"
    motnum = motor_num(_mne)
    _nbarg = $#

    # Parses arguments to extract device and attribute names.
    if (_nbarg == 3){
        if(motor_par(motnum,"type") != -1){
            SMARACT[_mne]["type"] = motor_par(motnum,"type")
        }
        # print "3 parameters given."
        SMARACT[_mne]["dev_name"] = "$2"
        SMARACT[_mne]["attr_name"] = "$3"
    }
    else {
        smaract_error_head
        print "$0 requires 3 arguments."
        print "usage -> $0  <mne> <device> <attribute>"
        exit
    }

    # Informative message.
    printf("Configuring macro motor ")
    tty_cntl("md")
    printf ("%s", "$1")
    tty_cntl("me")
    printf (" to reflect attribute ")
    tty_cntl("md")
    printf ("%s", SMARACT["$1"]["attr_name"])
    tty_cntl("me")
    printf (" of device ")
    tty_cntl("md")
    printf ("%s", SMARACT["$1"]["dev_name"])
    tty_cntl("me")
    print "."

    if (motor_num(_mne) < 0){
        printf("Warning: motor \"%s\" is not defined\n", _mne)
    }
}'

#    Removes reading of all attributes.
def smaract_unsetup_all '{
    cdef("", "", "_smaractmm_", "delete")
	}'

def smaract_prompt '{
   cdef("", "", "smaract_cleanup", "delete")
}'



def smaract_config(motnum, what, p1, p2) '{
   global SMARACT
   local _ds_name

   if((motnum == "..") && (what == "ctrl")) {
       # Check that the Tango DS is running
       if(ds_is_tango("testctrl/mcs2ctrl/1")) {
	    printf("testctrl/mcs2ctrl/1 is open.")
            # 
       }
       else{
           smaract_error_head
           printf("%s unresponsive -> disabling. \n", smaract_ADDR)
           return ".error."
       }
       return
   }

   if(what == "mot") {
       local _mne
       local _attr

       _mne = motor_mne(motnum)

       printf("SMARACT: Motor %10s linked to %s/%s\n", _mne, SMARACT[_mne]["dev_name"], SMARACT[_mne]["attr_name"])
    }
}'
def smaract_cmd(motnum, what, p1, p2) '{
    local _mot_mne  _dev  _attr
    local _pos_limit_sw  _neg_limit_sw _soft_pos_limit _soft_neg_limit

    _mot_mne = motor_mne(motnum)
    _dev    = SMARACT[_mot_mne]["dev_name"]
    _attr   = SMARACT[_mot_mne]["attr_name"]
    _target = _dev "/" _attr
  

    if(motnum == ".."){
        # key applying to all motors
        # print "--"
    }

    #-------------------------------------
    # "position" must return dial position (in integer steps)
    # parameters: none
    if (what == "position") {
        local _pos
          
        if (motor_par(motnum, "type") == -1){
            printf("smaract_cmd / position : motor %d is not defined", motnum)
        }
        else{
            _pos = tango_get(_dev, _attr)
            if (TANGO_ERR) {
               tty_cntl("md")
               print "\n" SMARACT_ERROR " " _mot_mne  " " _dev  "/"  _attr
               printf ("TANGO_ERR_MSG = \"%s\" \n\n", TANGO_ERR)
               print TANGO_ERR_STACK
               tty_cntl("me")
               exit
            }  
	#print _mot_mne  "  position is: "  _pos " mm"
        
	}
	return (_pos)
    }

    #-------------------------------------
    # "get_status" called during the motion, must return a bit mask


    # bits meaning: 0 if motor idle
    #               2 if motor moving
    #               4 if negative limit on
    #               8 if positive limit on
    #              16 if motor halted with emergency stop
    #              32 if motor is faulty (spec >= 5.07.04-4
    # parameters:   none
    if (what == "get_status") {
        local _state
        local _ret
        local _tmp

        _ret = 0
        # read arbitrary attribute because otherwise State attribute is not updated
        _tmp = tango_get(_dev, "Status")
        _state = tango_io(_dev, "State")
        if (TANGO_ERR){
            tty_cntl("md")
            print "\n" SMARACT_ERROR " " _mot_mne  " " _dev  "/"  _attr
            printf ("TANGO_ERR_MSG = \"%s\" \n\n", TANGO_ERR)
            print TANGO_ERR_STACK
            tty_cntl("me")
            exit
        }

        if (_state == 6) {
	    #print "\n"
	    #print  _dev " is Moving. (State 6)  \n\n"
	    #print _mot_mne " is Moving"
           # DEVMOVING
           #
            _ret |= 2
            #return _ret
	    
        }
        else if (_state == 8) {
           #
           # DEVFAULT
	    #printf ("Motor is Fault. (State 8) \n")
	    _soft_pos_limit = tango_get(_dev, "StepLimitMax")
	    #print "soft pos limit is: " _soft_pos_limit "pm\n"
            
	    if (TANGO_ERR){
            tty_cntl("md")
            print "\n" SMARACT_ERROR " " _mot_mne  " " _dev  "/"  _attr
            printf ("TANGO_ERR_MSG = \"%s\" \n\n", TANGO_ERR)
            print TANGO_ERR_STACK
            tty_cntl("me")
            exit
            }
            
	    _soft_neg_limit = tango_get(_dev, "StepLimitMin")
	    #print "soft neg limit is: " _soft_neg_limit "pm \n"
            if (TANGO_ERR){
            tty_cntl("md")
            print "\n" SMARACT_ERROR " " _mot_mne  " " _dev  "/"  _attr
            printf ("TANGO_ERR_MSG = \"%s\" \n\n", TANGO_ERR)
            print TANGO_ERR_STACK
            tty_cntl("me")
            exit
            }
 
            if (_soft_neg_limit == _soft_pos_limit && _soft_pos_limit == 0){
	        print "soft limits are not set, check the hardware."
            }
           
	    if (_soft_pos_limit > _soft_neg_limit){
		print "Soft Pos Limit is set: " _soft_pos_limit/1000000000 " mm" 
		print "Soft Neg Limit is set: " _soft_neg_limit/1000000000 " mm"
		pos = tango_get(_dev, "Position")
		 
		diff_pos = pos - (_soft_pos_limit/1000000000)
		#print "Top distance: " diff_pos " mm"
		if (diff_pos<0.05 && diff_pos> 0 ){
	            print "Soft Pos Limit ON"
		}
		diff_neg = (_soft_neg_limit/1000000000) - pos
		#print "Bottom distance: " diff_neg " mm"
		if (diff_neg < 0.05 && diff_neg >0 ){
		    print "Soft Neg Limit ON"	
		}
	    }
           #
            _ret |= 32
            #return _ret
	    
        }
        else {
            _ret = 0
        }
        # now check whether negative limit is set
        _neg_limit_sw = 0 
        if (TANGO_ERR){
            tty_cntl("md")
            print "\n" DESY_MMOTE_ERROR " " _mot_mne  " " _dev  "/"  _attr
            printf ("TANGO_ERR_MSG = \"%s\" \n\n", TANGO_ERR)
            print TANGO_ERR_STACK
            tty_cntl("me")
            exit
        }
        if (_neg_limit_sw > 0) {
            _ret |= 4
        }
        # finally positive limit
        _pos_limit_sw = 0
        if (TANGO_ERR){
            tty_cntl("md")
            print "\n" DESY_MMOTE_ERROR " " _mot_mne  " " _dev  "/"  _attr
            printf ("TANGO_ERR_MSG = \"%s\" \n\n", TANGO_ERR)
            print TANGO_ERR_STACK
            tty_cntl("me")
            exit
        }
        if (_pos_limit_sw > 0) {
            _ret |= 8
        }
        return _ret
    }

    #-------------------------------------
    # "start_one"
    # parameters: p2 is relative motion, p1 is absolute requested position
    if (what == "start_one") {
	#tango_io(_dev, "SetPosition",[0, p1])
        tango_put(_dev, _attr, p1)
        #tango_io(_dev, "Move")
        if (TANGO_ERR){
            tty_cntl("md")
            print "\n" " " _mot_mne  " " _dev  "/"  _attr
            printf ("TANGO_ERR_MSG = \"%s\" \n\n", TANGO_ERR)
            print TANGO_ERR_STACK
            tty_cntl("me")
            exit
        }
        return
    }

    #-------------------------------------

    # "set_position" called on "set_dial motor newpos"
    # parameters: p1 is the new position (in steps)
    #
    if (what == "set_position") {
        tango_put(_dev, _attr, p1)
        return 
	}
    if (what == "abort_one") {
        tango_io(_dev, "Stop")
        if (TANGO_ERR){
            tty_cntl("md")
            print "\n" " "  _mot_mne  " " _dev  "/"  _attr
            printf ("TANGO_ERR_MSG = \"%s\" \n\n", TANGO_ERR)
            print TANGO_ERR_STACK
            tty_cntl("me")
            exit
        }
        return
    }
}'
